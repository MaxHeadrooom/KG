#include <SFML/Window.hpp>
#include <SFML/OpenGL.hpp>
#include <cmath>

// Углы поворота куба
float angleX = 0.0f;
float angleY = 0.0f;

// Функция для отрисовки рёбер куба
void drawEdges() {
    glColor3f(1.0f, 0.0f, 0.0f); 
    glBegin(GL_LINES);
    // Передняя грань
    glVertex3f(-1.0f, -1.0f, 1.0f); glVertex3f(1.0f, -1.0f, 1.0f);
    glVertex3f(1.0f, -1.0f, 1.0f); glVertex3f(1.0f, 1.0f, 1.0f);
    glVertex3f(1.0f, 1.0f, 1.0f); glVertex3f(-1.0f, 1.0f, 1.0f);
    glVertex3f(-1.0f, 1.0f, 1.0f); glVertex3f(-1.0f, -1.0f, 1.0f);

    // Задняя грань
    glVertex3f(-1.0f, -1.0f, -1.0f); glVertex3f(1.0f, -1.0f, -1.0f);
    glVertex3f(1.0f, -1.0f, -1.0f); glVertex3f(1.0f, 1.0f, -1.0f);
    glVertex3f(1.0f, 1.0f, -1.0f); glVertex3f(-1.0f, 1.0f, -1.0f);
    glVertex3f(-1.0f, 1.0f, -1.0f); glVertex3f(-1.0f, -1.0f, -1.0f);

    // Соединение передней и задней граней
    glVertex3f(-1.0f, -1.0f, 1.0f); glVertex3f(-1.0f, -1.0f, -1.0f);
    glVertex3f(1.0f, -1.0f, 1.0f); glVertex3f(1.0f, -1.0f, -1.0f);
    glVertex3f(1.0f, 1.0f, 1.0f); glVertex3f(1.0f, 1.0f, -1.0f);
    glVertex3f(-1.0f, 1.0f, 1.0f); glVertex3f(-1.0f, 1.0f, -1.0f);
    glEnd();
}

// Функция для отрисовки нормалей на гранях куба
void drawNormal(float x, float y, float z, float nx, float ny, float nz) {
    glBegin(GL_LINES);
    glVertex3f(x, y, z);
    glVertex3f(x + nx * 0.5f, y + ny * 0.5f, z + nz * 0.5f);
    glEnd();
}

// Функция для отрисовки куба с нормалями
void drawCube() {
    glColor3f(0.1f, 0.1f, 0.1f);
    glBegin(GL_QUADS);

    // Передняя грань (нормаль: (0, 0, 1))
    glNormal3f(0.0f, 0.0f, 1.0f);
    glVertex3f(-1.0f, -1.0f, 1.0f);
    glVertex3f(1.0f, -1.0f, 1.0f);
    glVertex3f(1.0f, 1.0f, 1.0f);
    glVertex3f(-1.0f, 1.0f, 1.0f);

    // Задняя грань (нормаль: (0, 0, -1))
    glNormal3f(0.0f, 0.0f, -1.0f);
    glVertex3f(-1.0f, -1.0f, -1.0f);
    glVertex3f(-1.0f, 1.0f, -1.0f);
    glVertex3f(1.0f, 1.0f, -1.0f);
    glVertex3f(1.0f, -1.0f, -1.0f);

    // Левая грань (нормаль: (-1, 0, 0))
    glNormal3f(-1.0f, 0.0f, 0.0f);
    glVertex3f(-1.0f, -1.0f, -1.0f);
    glVertex3f(-1.0f, -1.0f, 1.0f);
    glVertex3f(-1.0f, 1.0f, 1.0f);
    glVertex3f(-1.0f, 1.0f, -1.0f);

    // Правая грань (нормаль: (1, 0, 0))
    glNormal3f(1.0f, 0.0f, 0.0f);
    glVertex3f(1.0f, -1.0f, -1.0f);
    glVertex3f(1.0f, 1.0f, -1.0f);
    glVertex3f(1.0f, 1.0f, 1.0f);
    glVertex3f(1.0f, -1.0f, 1.0f);

    // Верхняя грань (нормаль: (0, 1, 0))
    glNormal3f(0.0f, 1.0f, 0.0f);
    glVertex3f(-1.0f, 1.0f, -1.0f);
    glVertex3f(-1.0f, 1.0f, 1.0f);
    glVertex3f(1.0f, 1.0f, 1.0f);
    glVertex3f(1.0f, 1.0f, -1.0f);

    // Нижняя грань (нормаль: (0, -1, 0))
    glNormal3f(0.0f, -1.0f, 0.0f);
    glVertex3f(-1.0f, -1.0f, -1.0f);
    glVertex3f(1.0f, -1.0f, -1.0f);
    glVertex3f(1.0f, -1.0f, 1.0f);
    glVertex3f(-1.0f, -1.0f, 1.0f);

    glEnd();

    // Визуализация нормалей (желтый цвет)
    glColor3f(1.0f, 1.0f, 0.0f);
    drawNormal(0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f);  // Передняя грань
    drawNormal(0.0f, 0.0f, -1.0f, 0.0f, 0.0f, -1.0f); // Задняя грань
    drawNormal(-1.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f); // Левая грань
    drawNormal(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f);   // Правая грань
    drawNormal(0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f);   // Верхняя грань
    drawNormal(0.0f, -1.0f, 0.0f, 0.0f, -1.0f, 0.0f); // Нижняя грань
}

void perspectiveGL(float fovY, float aspect, float zNear, float zFar) {
    float fH = tan(fovY / 360.0f * 3.14159f) * zNear;
    float fW = fH * aspect;
    glFrustum(-fW, fW, -fH, fH, zNear, zFar);
}

int main() {
    sf::Window window(sf::VideoMode(800, 600), "3D Cube with Normals", sf::Style::Default, sf::ContextSettings(32));
    window.setVerticalSyncEnabled(true);

    glEnable(GL_DEPTH_TEST);
    glEnable(GL_NORMALIZE);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // Обработка нажатий клавиш для управления кубом
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::W)) {
            angleX -= 1.0f;
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::S)) {
            angleX += 1.0f;
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::A)) {
            angleY -= 1.0f;
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::D)) {
            angleY += 1.0f;
        }

        // Очищаем буфер цвета и глубины
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        // Устанавливаем перспективную проекцию
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        perspectiveGL(45.0f, 800.0f / 600.0f, 0.1f, 100.0f);

        // Устанавливаем модельно-видовую матрицу
        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();
        glTranslatef(0.0f, 0.0f, -5.0f);
        glRotatef(angleX, 1.0f, 0.0f, 0.0f);
        glRotatef(angleY, 0.0f, 1.0f, 0.0f);

        drawCube();
        drawEdges();

        window.display();
    }

    return 0;
}
