#include <SFML/Window.hpp>
#include <SFML/OpenGL.hpp>
#include <cmath>

// Углы поворота куба
float angleX = 0.0f;
float angleY = 0.0f;
float angleZ = 0.0f;

// Скорость вращения по осям
float rotationSpeedX = 0.0f;
float rotationSpeedY = 0.0f;
float rotationSpeedZ = 0.0f;

// Функция для отрисовки рёбер куба
void drawEdges() {
    glColor3f(1.0f, 0.0f, 0.0f);
    glBegin(GL_LINES);
    // Передняя грань
    glVertex3f(-1.0f, -1.0f, 1.0f); glVertex3f(1.0f, -1.0f, 1.0f);
    glVertex3f(1.0f, -1.0f, 1.0f); glVertex3f(1.0f, 1.0f, 1.0f);
    glVertex3f(1.0f, 1.0f, 1.0f); glVertex3f(-1.0f, 1.0f, 1.0f);
    glVertex3f(-1.0f, 1.0f, 1.0f); glVertex3f(-1.0f, -1.0f, 1.0f);

    // Задняя грань
    glVertex3f(-1.0f, -1.0f, -1.0f); glVertex3f(1.0f, -1.0f, -1.0f);
    glVertex3f(1.0f, -1.0f, -1.0f); glVertex3f(1.0f, 1.0f, -1.0f);
    glVertex3f(1.0f, 1.0f, -1.0f); glVertex3f(-1.0f, 1.0f, -1.0f);
    glVertex3f(-1.0f, 1.0f, -1.0f); glVertex3f(-1.0f, -1.0f, -1.0f);

    // Соединение передней и задней граней
    glVertex3f(-1.0f, -1.0f, 1.0f); glVertex3f(-1.0f, -1.0f, -1.0f);
    glVertex3f(1.0f, -1.0f, 1.0f); glVertex3f(1.0f, -1.0f, -1.0f);
    glVertex3f(1.0f, 1.0f, 1.0f); glVertex3f(1.0f, 1.0f, -1.0f);
    glVertex3f(-1.0f, 1.0f, 1.0f); glVertex3f(-1.0f, 1.0f, -1.0f);
    glEnd();
}

// Функция для отрисовки куба
void drawCube() {
    glColor3f(0.1f, 0.1f, 0.1f);
    glBegin(GL_QUADS);

    // Передняя грань
    glNormal3f(0.0f, 0.0f, 1.0f);
    glVertex3f(-1.0f, -1.0f, 1.0f);
    glVertex3f(1.0f, -1.0f, 1.0f);
    glVertex3f(1.0f, 1.0f, 1.0f);
    glVertex3f(-1.0f, 1.0f, 1.0f);

    // Задняя грань
    glNormal3f(0.0f, 0.0f, -1.0f);
    glVertex3f(-1.0f, -1.0f, -1.0f);
    glVertex3f(-1.0f, 1.0f, -1.0f);
    glVertex3f(1.0f, 1.0f, -1.0f);
    glVertex3f(-1.0f, -1.0f, -1.0f);

    // Левая грань
    glNormal3f(-1.0f, 0.0f, 0.0f);
    glVertex3f(-1.0f, -1.0f, -1.0f);
    glVertex3f(-1.0f, -1.0f, 1.0f);
    glVertex3f(-1.0f, 1.0f, 1.0f);
    glVertex3f(-1.0f, 1.0f, -1.0f);

    // Правая грань
    glNormal3f(1.0f, 0.0f, 0.0f);
    glVertex3f(1.0f, -1.0f, -1.0f);
    glVertex3f(1.0f, 1.0f, -1.0f);
    glVertex3f(1.0f, 1.0f, 1.0f);
    glVertex3f(1.0f, -1.0f, 1.0f);

    // Верхняя грань
    glNormal3f(0.0f, 1.0f, 0.0f);
    glVertex3f(-1.0f, 1.0f, -1.0f);
    glVertex3f(-1.0f, 1.0f, 1.0f);
    glVertex3f(1.0f, 1.0f, 1.0f);
    glVertex3f(1.0f, 1.0f, -1.0f);

    // Нижняя грань
    glNormal3f(0.0f, -1.0f, 0.0f);
    glVertex3f(-1.0f, -1.0f, -1.0f);
    glVertex3f(1.0f, -1.0f, -1.0f);
    glVertex3f(1.0f, -1.0f, 1.0f);
    glVertex3f(-1.0f, -1.0f, 1.0f);

    glEnd();
}

void perspectiveGL(float fovY, float aspect, float zNear, float zFar) {
    float fH = tan(fovY / 360.0f * 3.14159f) * zNear;
    float fW = fH * aspect;
    glFrustum(-fW, fW, -fH, fH, zNear, zFar);
}

int main() {
    sf::Window window(sf::VideoMode(800, 600), "3D Cube with Rotation", sf::Style::Default, sf::ContextSettings(32));
    window.setVerticalSyncEnabled(true);

    glEnable(GL_DEPTH_TEST);
    glEnable(GL_NORMALIZE);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // Управление скоростью вращения по X, Y, Z
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::W)) rotationSpeedX += 0.01f;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::S)) rotationSpeedX -= 0.01f;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::A)) rotationSpeedY += 0.01f;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::D)) rotationSpeedY -= 0.01f;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Q)) rotationSpeedZ += 0.01f;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::E)) rotationSpeedZ -= 0.01f;

        // Сброс углов и скорости при нажатии Space
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space)) {
            angleX = angleY = angleZ = 0.0f;  // Сброс углов
            rotationSpeedX = rotationSpeedY = rotationSpeedZ = 0.0f;  // Сброс скоростей
        }

        // Обновление углов вращения
        angleX += rotationSpeedX;
        angleY += rotationSpeedY;
        angleZ += rotationSpeedZ;

        // Очистка буфера
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        // Установка камеры
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        perspectiveGL(45.0f, 800.0f / 600.0f, 1.0f, 500.0f);

        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();
        glTranslatef(0.0f, 0.0f, -5.0f);

        // Вращение куба
        glRotatef(angleX, 1.0f, 0.0f, 0.0f);
        glRotatef(angleY, 0.0f, 1.0f, 0.0f);
        glRotatef(angleZ, 0.0f, 0.0f, 1.0f);

        drawCube();
        drawEdges();

        // Отображение результата
        window.display();
    }

    return 0;
}
